{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Calendars","text":""},{"location":"#course-calendar","title":"\ud83d\udcd3 Course Calendar","text":"Week Date Lecture Lab and Discussions Project 1 Mon 8/21 Wed 8/23 No Class Introduction to Game Engines Lab 0: Set up 2 Mon 8/28 Wed 8/30 Godot: 2D Games Unreal Engine: MetaHuman Lab 1: Unreal Engine 3 Mon 9/4 Wed 9/6 No Class (Labor Day) Unity and Perforce 4 Mon 9/11 Wed 9/13 C#: Data Structures, Namespaces AR/VR with Stanford XR and BroadAR Lab 2: Immersive Realities 5 Mon 9/18 Wed 9/20 Spatial Design with Niantic Labs C#: Arrays, Coroutines, Recursion Lab 3: Classes and Coroutines 6 Mon 9/25 Wed 9/27 Unity 3D: Player Movement and Collisions Unity 3D: Object Oriented Programming Lab 4: Generics and Inheritence Project 1: Advocacy 7 Mon 10/2 Wed 10/4 Embodied Cognition with UC Berkeley USC Resume and LinkedIn Workshop Lab 5: Quaternions Project 1 Checkpoint 8 Mon 10/9 Wed 10/11 Project 1 Playtest WebGL and ReactJS Lab 6: Publishing Builds Project 1 Due 9 Mon 10/16 Wed 10/18 Unity UI: uGUI and UI Toolkit Unity UI: UI Toolkit in World Space Lab 7: Raycasting Project 2: Outside the Box 10 Mon 10/23 Wed 10/25 Unity 3D: Mecanim Animation Unity 3D: Advanced Cinemachine Lab 8: Illumination 11 Mon 10/30 Wed 11/1 Yarn Spinner for Unity Variable Management C# and Yarn Lab 9: VFX Graph Pair Programming 12 Mon 11/6 Wed 11/8 Unity Math: Vector Geometry Unity Math: Pathfinding Algorithms Lab 10: Technical Interviews 13 Mon 11/13 Wed 11/15 Project 2 Playtest Individual Tutoring (Android/iOS Mobile Games) Paper Checkpoint 14 Mon 11/20 Tue 11/21 Wed 11/22 Individual Tutoring (Lua for Game Consoles) Individual Tutoring (Publishing for Steam) No Class (Thanksgiving) 15 Mon 11/27  Wed 11/29 Individual Tutoring (Developing Oculus VR Apps)  Individual Tutoring (Vuforia Engine for Unity AR) Code Review 16 Mon 12/4  Wed 12/6 Project 2 Playtest Project 2 Final Presentations 17 Mon 12/11  Wed 12/13 Individual Tutoring (Multiplayer with Photon)  Individual Tutoring (WebRTC and MQTT) Project 2 Due"},{"location":"#usc-academic-calendar","title":"\u270c\ufe0f USC Academic Calendar","text":"<ul> <li>Classes Begin: August 21st</li> <li>Labor Day: September 4th</li> <li>Fall Recess: October 12 - 13th</li> <li>Veterans Day: November 10th</li> <li>Thanksgiving Holiday: November 22 - 26th</li> <li>Classes End: December 1st</li> <li>Study Days: December 2 - 5th</li> <li>Exams: December 6 - 13th</li> </ul>"},{"location":"#office-hours-calendar","title":"\ud83d\uddd3\ufe0f Office Hours Calendar","text":"<ul> <li>Debbie Yuen: <ul> <li>MW 2:00 pm - 3:00 pm PST (On Campus)</li> <li>TuTh 7:00 pm - 10:00 pm PST (Google Meet)</li> </ul> </li> <li>Haocheng Liu:<ul> <li>M 10:00 am - 12:00 pm PST (On Campus &amp; Discord Voice Channel)</li> </ul> </li> </ul>"},{"location":"#contest-calendar","title":"\ud83c\udfc6 Contest Calendar","text":"Contest Category Deadline SF Design Week Design TBA Core77 Design TBA Fast Company Design TBA"},{"location":"courseinfo/","title":"Course Info","text":"<p>This page provides an overview of the policies for this course as taught at the University of Southern California. We meet Mondays and Wednesdays 4:00pm - 5:50pm PST at SCI L113.</p>"},{"location":"courseinfo/#staff","title":"\ud83e\udddc\u200d\u2640\ufe0f Staff","text":"<ul> <li> <p>Adjunct Assistant Professor Deborah (Debbie) Yuen</p> <ul> <li>Email: yuend@usc.edu</li> <li>Discord: @debbiey</li> <li>OH: Monday, Wednesdays 1:00 pm - 3:00 pm</li> </ul> </li> <li> <p>Student Assistant Haocheng Liu</p> <ul> <li>Contact via Discord</li> <li>OH: TBA</li> </ul> </li> </ul>"},{"location":"courseinfo/#section-dates","title":"\ud83d\udcc5 Section Dates","text":"<ul> <li>First day of classes: Monday, August 21, 2023</li> <li>Last day to add: Friday, September 8, 2023</li> <li>Last day to change to Pass/No Pass: Friday, September 8, 2023</li> <li>Last day to drop without a mark of \"W\" and receive a refund: Friday, September 8, 2023</li> <li>Last day to withdraw without a \u201cW\u201d on transcript or change pass/no pass to letter grade: Friday, October 6, 2023</li> <li>Last day to drop with a mark of \"W\": Friday, November 10, 2023</li> <li>Last day of classes: Friday, December 1, 2023</li> <li>End of session: Wednesday, December 13, 2023</li> </ul>"},{"location":"courseinfo/#course-description","title":"\ud83d\udcc7 Course Description","text":"<p>This course teaches the art of creating digital game prototypes and introduces the world of game engines. The class briefly introduces industry standard game engines such as Unreal Engine and Godot then dives deep into the Unity game development using C# scripting. In class, students will be creating two games with Unity 3D and Unity AR while learning the fundamentals of C# scripting. </p> <p>Unity is a professional tool in widespread use, including on award-winning, high-profile games such as Monument Valley, Hearthstone, Threes!, and Pok\u00e9mon Go. It can be used to create games for many platforms, from desktop to mobile to consoles. We will also discuss the role of prototyping in the creative process and introduce the use of version control systems in developing code.</p>"},{"location":"courseinfo/#course-rationale","title":"\ud83d\udca1 Course Rationale","text":"<p>All designers need the ability to communicate their ideas to others. Because games are interactive, a functioning prototype communicates the designer\u2019s ideas more clearly than any static description can. A game designer\u2019s ability to prototype is thus equivalent to a cinematographer\u2019s ability to sketch \u2013 while the skill does not directly appear in the final product, it allows the designer to refine his or her ideas and communicate them in a direct way to both team members and test audiences. In addition, the rules, patterns, and behaviors that form the game experience are a direct reflection of the underlying code. Code is the raw material with which interactive experiences are built, as pottery is made of clay, and paintings are made of paint. The designer who understands code, therefore, has a much deeper understanding of games as a medium.</p>"},{"location":"courseinfo/#assignments","title":"\ud83d\udcda Assignments","text":""},{"location":"courseinfo/#labs","title":"\ud83e\udd7c Labs","text":"<p>There will be weekly lab assignments that will be completed with your lab partner. These assignments will help inform your two projects later on down the line. </p>"},{"location":"courseinfo/#discussions","title":"\ud83d\udd16 Discussions","text":"<p>Discussions are individual homework assignments including readings, videos, and computer set-up instructions. </p>"},{"location":"courseinfo/#project-1","title":"\u2b50\ufe0f Project 1","text":"<p>The first project will be a 3D Unity game designed by you and your project partner! </p>"},{"location":"courseinfo/#project-2","title":"\u2b50\ufe0f Project 2","text":"<p>The final project can be an individual or paired project in which you work on developing a game of your choice. </p>"},{"location":"courseinfo/#communication","title":"\u260e\ufe0f Communication","text":"<p>We will be using our Discord channel to communicate. </p>"},{"location":"courseinfo/#materials","title":"\ud83d\udecd\ufe0f Materials","text":"<ul> <li>Unity 2020 or higher</li> <li>Mouse</li> <li>Perforce</li> </ul>"},{"location":"courseinfo/#grading","title":"\ud83d\udcaf Grading","text":"Assignment Percentage Participation 10% Labs 10% Project 1 30% Project 2 50% Total 100%"},{"location":"courseinfo/#absence-policy","title":"\ud83c\udfeb Absence Policy","text":"<p>Students are expected to attend every class. This is for your own sake \u2013 we will move quickly, and it is easy to fall behind. The following guidelines, from the Interactive Media Division handbook, apply to all students:</p> <ul> <li>Two unexcused absences: lowers course grade by one half grade point, e.g. from A- to B+</li> <li>Three unexcused absences: lowers course grade by one full grade point, e.g. from B to C</li> <li>Four or more unexcused absences: request to withdraw from the course (instructor\u2019s discretion)</li> </ul> <p>You must contact me as soon as possible regarding your absence. Generally, I will expect to hear from you before class; in exigent circumstances, I would expect to hear from you within 24 hours. If you are sick, stay home. You need to be healthy to learn, and so do your classmates (and instructors). I also do not distinguish between mental health and physical health. If you cannot complete an assignment on time or come to class because of mental health issues, you must contact me promptly, just as with physical health problems.</p>"},{"location":"courseinfo/#incompletes","title":"\ud83d\udc4c Incompletes","text":"<p>The only acceptable reasons for taking an incomplete course are personal illness or a documented family emergency. Students who wish to take incompletes must present documentation of the problem to the instructor before final grades are due. Incompletes are not available before the Week 12 withdrawal deadline.</p>"},{"location":"courseinfo/#conduct","title":"\u2764\ufe0f Conduct","text":"<p>In this class, we make a commitment to foster a welcoming and supportive environment where students of all identities and backgrounds can flourish. This means that we will issue content warnings as appropriate, use preferred pronouns, and respect self-identifications. While debate and discussion are welcome, please remain aware of the implications of your words and the images that you include in your work. If the instructor or another student points out that something you have said or shared with the group might be offensive, avoid being defensive; this is a valuable opportunity for us to grow and learn together. </p> <p>If you have a concern about any aspect of the class, you are encouraged to speak with the instructor. If you feel uncomfortable speaking with the instructor, you are also welcome to speak with either the undergraduate or graduate advisor for the division, who can discuss the issue with you directly or point you toward other on- and off-campus resources for addressing your concern. </p> <p>Behavior that persistently or grossly interferes with classroom activities is considered disruptive behavior and may be subject to disciplinary action. Such behavior inhibits other students' ability to learn and an instructor's ability to teach. A student responsible for disruptive behavior may be required to leave class pending discussion and resolution of the problem and may be reported to the Office of Student Judicial Affairs for disciplinary action. </p> <p>Discrimination, sexual assault, intimate partner violence, stalking, and harassment are prohibited by the university. You are encouraged to report all incidents to the Office of Equity and Diversity/Title IX Office (equity.usc.edu) and/or to the Department of Public Safety (dps.usc.edu). This is important for the health and safety of the whole USC community. Faculty and staff must report any information regarding an incident to the Title IX Coordinator who will provide outreach and information to the affected party. The Sexual Assault Resource Center webpage (sarc.usc.edu) fully describes reporting options. Relationship and Sexual Violence Services (engemannshc.usc.edu/rsvp) provides 24/7 confidential support.</p>"},{"location":"courseinfo/#academic-integrity","title":"\ud83c\udfc4\u200d\u2642\ufe0f Academic Integrity","text":"<p>Plagiarism \u2013 presenting someone else\u2019s ideas as your own, either verbatim or recast in your own words or code \u2013 is a serious academic offense with serious consequences. Please familiarize yourself with the discussion of plagiarism in SCampus in Part B, Section 11, \u201cBehavior Violating University Standards\u201d (policy.usc.edu/student/scampus/part-b). Other forms of academic dishonesty are equally unacceptable. See additional information in SCampus and university policies on scientific misconduct (policy.usc.edu/scientificmisconduct). </p> <p>General principles of academic honesty include the concept of respect for the intellectual property of others, the expectation that individual work will be submitted unless otherwise allowed by an instructor, and the obligations both to protect one\u2019s own academic work from misuse by others as well as to avoid using another\u2019s work as one\u2019s own. All students are expected to understand and abide by these principles. Students will be referred to the Office of Student Judicial Affairs and Community Standards for further review, should there be any suspicion of academic dishonesty. The Review process can be found at www.usc.edu/student-affairs/SJACS/. </p> <p>For this class, you are encouraged to copy and modify code from online sources and from class demonstration projects. You are also welcome to work together on individual assignments. However, you must always label and provide attribution for work that is not your own, using a credits screen in your game or a credits.txt file delivered with your build.</p> <p>You must provide attribution: * If you use more than 3 lines of code from an external source without substantially modifying it * If you use any assets (images, textures, sounds, etc.) that are not your own work</p> <p>You may use any code presented in class without attribution. If you are not sure whether you need to document something, document it. If you are uncertain about what constitutes plagiarism, it is your responsibility to ask the instructor for clarification.</p>"},{"location":"courseinfo/#support-systems","title":"\ud83d\udc36 Support Systems","text":"<p>A number of USC\u2019s schools provide support for students who need help with scholarly writing. Check with your advisor or program staff to find out more. Students whose primary language is not English should check with the American Language Institute (ali.usc.edu), which sponsors courses and workshops specifically for international students.</p> <p>The Office of Disability Services and Programs (dsp.usc.edu) provides certification for students with disabilities and helps arrange the relevant accommodations. If an officially declared emergency makes travel to campus infeasible, USC Emergency Information (emergency.usc.edu) will provide safety and other updates, including ways in which instruction will be continued by means of Blackboard, teleconferencing, and other technology. </p>"},{"location":"courseinfo/#acknowledgments","title":"\ud83d\udc90 Acknowledgments","text":"<p>Some course handout material derived from previous terms, professors, and GSIs. Thank you to Sean Bloom, Sam Roberts, and Margaret Moser.</p>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#assets-and-packages","title":"\ud83d\udce6 Assets and Packages","text":"<ul> <li>Yarn Spinner: Open-source tool for writing game dialogue</li> <li>Kenny: Free game assets</li> </ul>"},{"location":"resources/#guides-for-concepts","title":"\ud83d\uddfa\ufe0f Guides for Concepts","text":""},{"location":"resources/#c-sharp","title":"\ud83d\udc69\u200d\ud83d\udcbb C-Sharp","text":"<ul> <li>Unity C# Intermediate Scripting Tutorials</li> <li>Coding in C# in Unity for Beginners</li> <li>Brackeys</li> </ul>"},{"location":"resources/#c","title":"\ud83d\udc69\u200d\ud83d\udcbb C++","text":"<ul> <li>The Cherno</li> </ul>"},{"location":"resources/#virtual-reality","title":"\ud83e\udd7d Virtual Reality","text":"<ul> <li>Valem Tutorials</li> <li>Meta Quest Build Your First App</li> </ul>"},{"location":"resources/#augmented-reality","title":"\ud83e\udd33 Augmented Reality","text":"<ul> <li>Get Started with AR Foundation in Unity</li> <li>Project-Based Augmented Reality Course with Unity Engine and AR Foundation</li> </ul>"},{"location":"resources/#ios-swift-and-swiftui","title":"\ud83d\udcf1 iOS: Swift and SwiftUI","text":"<ul> <li>Introducing SwiftUI</li> <li>Introduction to SpriteKit</li> <li>Create a Multiplayer iOS Game</li> <li>Unity Apple Game Center Documentation</li> <li>Apple Unity Plug-Ins</li> </ul>"},{"location":"resources/#android-kotlin","title":"\ud83d\udcf1 Android (Kotlin)","text":"<ul> <li>Modern Android App Architecture</li> <li>Android Basics in Kotlin</li> <li>Android Permission Requests</li> <li>Android Studio and Kotlin Tutorial - Music Player</li> </ul>"},{"location":"resources/#asymptotics","title":"\ud83d\udc7e Asymptotics","text":"<ul> <li>Berkeley CS 61A: Structure and Interpretation of Computer Programs</li> <li>Berkeley CS 61B: Data Structures</li> <li>PathFinding.js</li> <li>VisuAlgo</li> <li>Big-O Cheat Sheat</li> <li>USFCA Visualizations</li> <li>Data Structures Wikibook</li> </ul>"},{"location":"resources/#guides-for-tools","title":"\ud83d\udee0\ufe0f Guides for Tools","text":""},{"location":"resources/#git","title":"\ud83d\udc31 Git","text":"<ul> <li>GitHub Hello World</li> <li>Berkeley CS61B Using Git</li> <li>Berkeley CS61B Weird Technical Failure Scenarios</li> <li>Git Documentation</li> <li>A Hacker's Guide to Git</li> </ul>"},{"location":"resources/#perforce","title":"\u267e\ufe0f Perforce","text":"<ul> <li>Perforce Tutorial</li> <li>Perforce Youtube</li> </ul>"},{"location":"resources/#visual-studio","title":"\ud83d\udfea Visual Studio","text":"<ul> <li>Visual Studio for Unity QuickStart</li> </ul>"},{"location":"resources/#visual-studio-code","title":"\ud83d\udfe6 Visual Studio Code","text":"<ul> <li>Visual Studio Code Extensions</li> <li>Learn to Code with Visual Studio Code</li> <li>Set up Visual Studio Code for Unity on Macs</li> </ul>"},{"location":"resources/#unity","title":"\ud83c\udfae Unity","text":"<ul> <li>Unity Lego Microgame</li> <li>Learn Unity</li> <li>GameDev.tv</li> <li>Complete C# Unity Game Developer 3D</li> </ul>"},{"location":"resources/#unreal-engine","title":"\ud83c\udfae Unreal Engine","text":"<ul> <li>Unreal Sensei</li> <li>GameDev.tv</li> <li>Unreal Engine Learn</li> </ul>"},{"location":"resources/#godot-engine","title":"\ud83c\udfae Godot Engine","text":"<ul> <li>Godot Engine GitHub</li> <li>Godot Tutorials</li> <li>GDQuest</li> <li>Godot Docs</li> <li>Games from Scratch</li> <li>KidsCanCode</li> <li>Learn GDScript From Zero</li> </ul>"},{"location":"resources/#blender","title":"\ud83c\udf69 Blender","text":"<ul> <li>Blender Guru</li> <li>Blender Tutorials</li> <li>Chris Holt</li> </ul>"},{"location":"resources/#interview-preparation","title":"\ud83d\udcaa Interview Preparation","text":""},{"location":"resources/#mentorship","title":"\u2764\ufe0f Mentorship","text":"<ul> <li>ADPList: Find mentorship</li> <li>The Blind: Advice and salaries</li> <li>trueup: Job Listings</li> <li>Pramp: Interview Prep</li> <li>USC Handshake</li> </ul>"},{"location":"resources/#resume-and-cvs","title":"\ud83d\udcdd Resume and CVs","text":"<ul> <li>STAR Method</li> <li>Action Words</li> <li>Berkeley Resume Samples</li> </ul>"},{"location":"resources/#technical-interviews","title":"\u2328\ufe0f Technical Interviews","text":"<ul> <li>Neetcode.io: Programming Questions</li> <li>Leetcode Game Theory: Practice Questions</li> <li>Take-Home Projects: Technical Exams</li> <li>Coding Interview Patterns</li> <li>Cracking the Coding Interview</li> </ul>"},{"location":"resources/#portfolio","title":"\ud83c\udfa8 Portfolio","text":"<ul> <li>GitHub Profile README</li> <li>Sean Allen</li> <li>National Portfolio Day</li> <li>Figma Portfolio Templates</li> </ul>"},{"location":"Labs/lab00/","title":"\ud83e\uddf0 Lab 0: Set Up","text":"<p>In our next two class sessions, we will be learning Godot and Unreal Engine with the Perforce as our primary source control tool. </p>"},{"location":"Labs/lab00/#perforce","title":"Perforce","text":"<p>Perforce is known for its roots with version control. However, Perforce as a whole does much more than create version control tools. Perforce is ideal for large files and binaries that have a lot of assets. Perforce also allows users to lock certain files which is helpful in collaborating on projects.</p> <p>Download Perforce</p> <p>Download Perforce Helix Visual Client (P4V).</p> <p> </p> <p>Sign in</p> <p>Sign in with your USC credentials.</p> <p> </p>"},{"location":"Labs/lab00/#github","title":"GitHub","text":"<p>GitHub is a platform and cloud-based service for software development and version control using Git. In order to use GitHub for large files, we must also download Git Large File Storage (LFS)</p> <p>Create a GitHub account</p> <p>Apply for GitHub Education and create an account.</p> <p> </p> <p>Install Git</p> <p>Install Git.</p> <p> </p> <p>Install Git LFS</p> <p>Download Git LFS.</p> <p> </p>"},{"location":"Labs/lab00/#unity","title":"Unity","text":"<p>Unity is a cross-platform game engine for mobile, desktop, web, console, and headset games. In this course, we will be working primarily in Unity. If you do not have a Unity account, make sure to sign up with you usc.edu email to get access to Unity's Student Plan.</p> <p>Install Unity Hub (Student)</p> <p>Install the latest version of Unity Hub. Below is a screenshot of the latest Unity Hub. Check your version by going to <code>UnityHub/ About Unity Hub</code>.</p> <p> </p> <p>Install Unity</p> <p>Install Unity Editor Version 2021.3.29f1 or above. Make sure to also unclude the <code>WebGL Build Support</code> module.</p> <p> </p> <p>Download the LEGO Microgame</p> <p>Download the LEGO Microgame template. We will be experimenting with the Lego Microgame in future labs. </p> <p> </p>"},{"location":"Labs/lab00/#godot","title":"Godot","text":"<p>Godot is a cross-platform game engine for 2D and 3D games. The cool part of Godot is that it is free and open source! If you're interested, you can contribute to the Godot Engine community on GitHub!</p> <p>Reading: Godot Docs</p> <p>In the next class, we will be walking through your first Godot 2D and 3D game. Please read the <code>Getting Started/Introduction</code> section before class.</p> <p></p> <p>Install Godot</p> <p>Install Godot Engine .NET Version 4.1.1.</p> <p></p>"},{"location":"Labs/lab00/#unreal-engine","title":"Unreal Engine","text":"<p>Unreal Engine is a game engine specifically designed for advanced real-time 3D creations and graphics. Unreal Engine is ideal for photoreal visuals and immersive experiences. </p> <p>Download Epic Games launcher</p> <p>Follow the download instructions.</p> <p></p> <p>Install Unreal Engine</p> <p>Download Unreal Engine 5.2. This version brings native support to Apple Silion and other developments for macOS.</p> <p></p>"},{"location":"Labs/lab01/","title":"\ud83c\udfae Lab 1: Unreal Engine","text":"<p>The goals of this week's lab is to:</p> <ul> <li> <p>Compare and contrast game engines for your development needs</p> </li> <li> <p>Set up Perforce </p> </li> <li> <p>Get started with Unreal Engine</p> </li> <li> <p>Explore the Unreal Engine Asset Store</p> </li> </ul> <p>It is a lot more fun to do your assignments with your classmates! Please work on this assignment with a lab partner. </p>"},{"location":"Labs/lab01/#so-which-game-engine","title":"So which game engine?","text":"<p>In this course, we explore Godot, Unreal Engine, and Unity. Each game engine has its own superpower. The best game engine is the one that meets your needs and you feel comfortable learning in. You might default to one but also use various game engines for specific purposes. We will be having a discussion during class about game engines. Please read the following before class:</p> <ul> <li> <p>Why game engines aren\u2019t enough to meet the needs of modern developers</p> </li> <li> <p>Unity vs Unreal vs GoDot? (Why did I pick ..?)</p> </li> <li> <p>Embedded Generative AI Will Power Game Characters</p> </li> </ul>"},{"location":"Labs/lab01/#perforce-setup","title":"Perforce Setup","text":"<p>We will be walking through Perforce together in class together. But, feel free to get started first here.</p>"},{"location":"Labs/lab01/#unreal-engine","title":"Unreal Engine","text":"<p>We are now ready to start learning Unreal Engine! Please try to do as much of this tutorial before class. If you don't finish, that is okay - it is more important to learn and understand the concepts. You will have time to continue the tutorial during lab.</p> <p>Tutorial: Your First Hour in Unreal Engine 5.0</p> <p>Complete the Unreal Engine \"Your First Hour in Unreal Engine 5.0\" tutorial.</p> <p></p>"},{"location":"Labs/lab01/#unreal-engine-marketplace","title":"Unreal Engine Marketplace","text":"<p>A great way to start creating your own game is with starter templates. There are many free and for-sale templates that you can find. Check out the Unreal Engine Marketplace.</p> <p>Unreal Templates and Assets</p> <p>Visit the Unreal Engine Marketplace and the Templates Reference.</p> <p></p>"},{"location":"Labs/lab02/","title":"\ud83e\udd7d Lab 2: Immersive Realities","text":"<p>via GIPHY</p> <p>We have a couple of guest speakers who will be joining us remotely in the next couple of weeks. Please come prepared to their guest lectures with questions to ask each speaker and review their work at the links provided below. </p> <ul> <li>Josh Mao</li> <li>Kathy Yuting Wang</li> <li>James Smith</li> </ul>"},{"location":"Labs/lab02/#8th-wall","title":"8th Wall","text":"<ul> <li>8th Wall: Wave Hello to Hand Tracking</li> <li>8th Wall: Introducing new and improved Face Effects</li> </ul>"},{"location":"Labs/lab02/#spatial-computing","title":"Spatial Computing","text":"<ul> <li>Dual Body Bimanual Coordination in Immersive Environments</li> <li>GeneratiVR: Spatial Interactions in Virtual Reality to ExploreGenerative Design Spaces</li> </ul>"},{"location":"Labs/lab03/","title":"\ud83c\udfb9 Lab 3: Classes and Coroutines","text":"<p>via GIPHY</p>"},{"location":"Labs/lab03/#resources-and-links","title":"Resources and Links","text":"<ul> <li>Unity Learn: Classes</li> <li>Microsoft Learn: Introduction to Classes</li> <li>Learn C#: Classes and Objects</li> <li>Unity Documentation: Coroutines</li> <li>Asynchronous Courotines with C#</li> </ul>"},{"location":"Labs/lab03/#classes","title":"Classes","text":"<p>Classes are reference types that are <code>null</code> by default until you explicitly create an instance of the class by using the <code>new</code> operator or assign it an object of a compatible type that may have been created elseswhere. </p> C# DeclaringClasses.cs<pre><code>// Declaring an object of type MyClass.\nMyClass mc = new MyClass();\n// Declaring another object of the same type, assigning it the value of the first object.\nMyClass mc2 = mc;\n// Classes are declared by using the class keyword followed by a unique identifier\n// [access modifier] - [class] - [identifier]\npublic class Customer {\n// Fields, properties, methods and events go here\n}\n// Objects can be created using the new keyword followed by the name of the class\nCustomer object1 = new Customer();\n</code></pre>"},{"location":"Labs/lab03/#class-inheritance","title":"Class inheritance","text":"<p>Class inheritance means that a class can inherit from any other class that isn't sealed. Other classes can also inherit and override from your class. Classes that inherit must derive from another base class so that it can inherit data and behavior. This base class is specified by appending a colon and the name of the base class bollowing the derived class name. </p> <p>In the C# language, a class can only directly inherit from one base class. The class then can directly implement one or more interfaces. </p> C# ClassInheritance.cs<pre><code>// Declaring an object of type MyClass.\npublic class Manager: Employee\n{\n// Employee fields, properties, methods and events are inherited\n// New Manager fields, properties, methods and events go here\n}\n</code></pre>"},{"location":"Labs/lab03/#couroutines","title":"Couroutines","text":"<p>Courtines are really powerful in Unity by how they hook into Unity's core loop by running every frame. When a coroutine, it runs like a function until it reaches a <code>yield</code> statment. It then sets a sort of bookmark and <code>yields</code>, which tells the rest of the game to proceed. Each frame right after the <code>Update</code> function, Unity calls the coroutine again. The coroutine returns to its bookmark and checks its yield condition. When the yield condition is <code>true</code>, for exa mple, when 1.5 seconds have passed, the bookmark is deleted and the rest of the coroutine function runs as usual. Coroutines are functions and you call them with the following syntax. </p> <p>When to use couroutines in Unity:</p> <ul> <li>Create repeating actions</li> <li>To run an animation or play a sound that doesn't change the game state</li> </ul> C# <pre><code>// Coroutine basic setup\nStartCoroutine(PlayFlagpoleAnimation());\nIEnumerator PlayFlagpoleAnimation()\n{\n// Do stuff\nyield return someCondition;\n// Do more stuff\n}\n</code></pre> <p>Below is an example of Unity's built-in <code>WaitForSeconds</code> coroutine. While working in Unity, the coroutine you will use the most (by far) is Unity's built-in <code>WaitForSeconds</code> coroutine. The <code>yield</code> keyword means keep going with the rest of the game. Everything after the <code>return</code> is called the yield condition. It is something that will eventually be true. For example, afte 1.5 seconds have passed.</p> C# <pre><code>// Do stuff\n// Then wait\nyield return new WaitForSeconds(1.5f);\n// Everything after the yield happens after 1.5 seconds\n</code></pre> <p>The coroutine function can have more than one yield statement. It works the same way; the \"bookmark\" just moves to the latest yield statement. </p> C# <pre><code>// Do stuff\n// Then wait 1.5 seconds\nyield return new WaitForSeconds(1.5f);\n// Do stuff\n// Then wait 2 seconds\nyield return new WaitForSeconds(2.0f);\n</code></pre>"},{"location":"Labs/lab03/#try-it-yourself","title":"Try it yourself!","text":"<p>Coroutines and Classes</p> <p>Follow along Unity Learn's Intermediate tutorial on C# Coroutines. Then watch Coroutines in Unity and Ienumerator &amp; Corountine in Unity</p> <p></p>"},{"location":"Labs/lab04/","title":"\ud83c\udfe1 Lab 4: Generics and Inheritence","text":"<p>via GIPHY</p>"},{"location":"Labs/lab04/#resources-and-links","title":"Resources and Links","text":"<ul> <li>Unity Learn: Generics</li> <li>C# Generics and Unity</li> <li>Unity Documentation: Generic Functions</li> <li>Microsoft Learn: Generic Classes and Methods</li> <li>C# Generics</li> </ul>"},{"location":"Labs/lab04/#generics","title":"Generics","text":"<p>Generics allow us to create code that is more \"generic\" so that it can be used and reused. Remember \"DRY\" in programming? Also known as \"Don't Repeat Yourself.\" Generics are really helpful here in preventing the need for duplicate code - which is always a great thing. </p> <p>Generics are created by adding <code>&lt;T&gt;</code> after the class name. <code>&lt;T&gt;</code> represents the generic type that gets set while being called. We can have multiple generic types in a class by separating them with commas like <code>&lt;T, U, V&gt;</code>. When declaring generics in Unity, the general naming convention starts from T and moves alphabetically down as T, U, V, etc. </p> C# <p><pre><code>// Generic Class Example\npublic class GenericClass &lt;T&gt; {\npublic Type GetMyType() {\nreturn typeof (T);\n}\n}\n</code></pre> The Unity Scripting API Reference documentation lists some functions (for example, the various GetComponent functions) with a variant that has a letter <code>&lt;T&gt;</code> or a type name in angle brackets after the function name. These are generic functions. You can use them to specify the types of parameters and/or the return type when you call the function.</p> C# <pre><code>void FuncName&lt;T&gt;();\n// The type is correctly inferred because it is defined in the function call\nvar obj = GetComponent&lt;Rigidbody&gt;();\nRigidbody rb = go.GetComponent&lt;Rigidbody&gt;();\n</code></pre>"},{"location":"Labs/lab04/#inheritence","title":"Inheritence","text":""},{"location":"Labs/lab05/","title":"\ud83c\udf69 Lab 5: Quaternions","text":""},{"location":"Labs/lab05/#resources-and-links","title":"Resources and Links","text":"<ul> <li>Unity Learn: Generics</li> <li>C# Generics and Unity</li> <li>Unity Documentation: Generic Functions</li> <li>Microsoft Learn: Generic Classes and Methods</li> <li>C# Generics</li> </ul>"},{"location":"Labs/lab05/#quaternions","title":"Quaternions","text":""},{"location":"Labs/lab06/","title":"\ud83d\udc77\u200d\u2640\ufe0f Lab 6: Publishing Builds","text":""},{"location":"Labs/lab06/#resources-and-links","title":"Resources and Links","text":"<ul> <li>Unity Manual: Publishing Builds</li> <li>Unity Learn: Create and publish WebGL builds</li> <li>YouTube: Create and Publish WebGL Build in Unity</li> <li>YouTube: Publish your Unity game on Google Play Store</li> <li>YouTube: How to publish a Unity project to itch.io</li> </ul>"},{"location":"Labs/lab06/#builds","title":"Builds","text":"<p>via GIPHY</p> <p>During class, we have been running our projects within the Unity Editor. This is a great way to quickly test things and iterate. Now we want players to experience our games! </p> <p>What is a build? A build is a standalone version of your game, so our players don't need to open our projects in Unity. They can double-click on the program to run the game. The term Build is used interchangeably with application or executable. They all mean the same thing. </p> <p>It isn't possible to run a Windows application on an OSX device. Same goes for a PlayStation game on an iPhone. Each requires its own special format. The operating system the player is using is referred to as a platform or within Unity, a build target. Some examples include:</p> <ul> <li>PS5</li> <li>Windows 10</li> <li>Oculus Quest 2</li> <li>Android 11</li> <li>iOS16</li> </ul> <p>Unity allows developers to build games for a variety of platforms. Exporting your game to some platform is an important part of game development, a task that every game developer will have to do at least once during their career! To test your projects, create a build. To release your game to the public, create development builds by checking the <code>Development Builds</code> box.</p> <p>Important notes:</p> <ul> <li>Install optional modules in Unity Hub</li> <li>Easily switch between different platforms but code may look different for each platform</li> <li>Must accomodate designing for different platforms and adjust the input system to reflect so</li> <li>Create a new folder for your builds. Do not push these buils to GitHub and Perforce</li> <li>Sometimes the game within your editor will not look and feel the same as your built game</li> <li>It is not recommended to rename the folder name that was automatically generated for you. It might break things. If you want to change the name, make a whole new and separate build</li> <li>Be careful and precise as you follow the steps, including all punctuation and capitalization</li> </ul>"},{"location":"Labs/lab06/#rendering-quality","title":"Rendering Quality","text":"<p>For each device or platform you build to, it is important to consider the quality and the rendering settings of the game. Feel free to adjust and set a certain quality level for different platforms and levels within the game. This will take some experimentation to get to a setting that works best for your game. Edit the settings under <code>Edit/Project Settings/Quality</code>.</p> <p></p>"},{"location":"Labs/lab06/#player-settings","title":"Player Settings","text":"<p>You may also have different build settings for each player. Under <code>Edit/Project Settings/Player</code>, you may modify player icons, cursors, and names. You can also modify the splash screen animation!</p> <p></p>"},{"location":"Labs/lab06/#marketing","title":"Marketing","text":"<p>In 2022, Unity merged with ironSource. ironSource helps bring apps and user experiences by focusing on the app's business expansion in relation to the app economy. ironSource helps with monetization, marketing, analytics, and discovery capabilities that help developers scale their app-based businesses. Unity recommends ironSource  to help you monetize and market your game.</p> <p>Resources:</p> <ul> <li>How to Consistently Make Profitable Indie Games</li> <li>How to Market a Game, Chris Zukowski</li> </ul>"},{"location":"Labs/lab07/","title":"\ud83d\udcdf Lab 7: Raycasting","text":""},{"location":"Labs/lab07/#what-is-raycasting","title":"What is Raycasting?","text":"<p>Raycasting is the \"ray\" or invisible line within a game world that shows what GameObjects are in that direction. Raycasting can be used to draw a ray from the center of one character to another and see whether it hits another object. This is important because a mouse doesn't technically exist within the game world. </p> <p>In the game world, the mouse position is just a set of coordinates on a 2D screen. In this case, covert the mouse's screen position into a world position. Then, you can send a ray forward into the game world to see what it hits. </p> <p></p> <p>You can use raycasting to answer questions like:</p> <ul> <li>Where will the player's grappling hook hit the ceiling?</li> <li>Can one player see another player's character?</li> <li>Is the character standing on solid ground?</li> <li>Is the player's mouse hovering over an object? </li> </ul>"},{"location":"Labs/lab08/","title":"\ud83d\udca1 Lab 8: Illumination","text":""},{"location":"Labs/lab09/","title":"\ud83c\udf1d Lab 9: VFX Graph","text":""},{"location":"Labs/lab09/#what-is-vfx","title":"What is VFX","text":"<p>dfaf</p>"},{"location":"Labs/lab10/","title":"\u260e\ufe0f Lab 10: Technical Interviews","text":"<p>Something I am continuously learning. Share with you things I wish I knew while I was a student.  Iterative process.</p> <ul> <li> Job Descriptions: Look at current job openings and read their job descriptions</li> <li> Events and Conferences: Go to events</li> <li> Recruiting Schedule: Timing</li> <li> Resume: Build</li> <li> Portfolio: Build</li> <li> Practice: Build</li> <li> Interviewing:  build building</li> </ul> <p>You can do it :)</p>"},{"location":"Labs/lab10/#linkedin","title":"LinkedIn","text":"How to find people who are #hiring <p>Hi </p> Who to follow <p>Hi </p> InMail Messaging <p>Hi </p> The algorithm <p>Hi </p>"},{"location":"Labs/lab10/#technical-exams","title":"Technical Exams","text":"HackerRank <p>Hi </p> CoderPad and Sandbox <p>Hi </p> How to prepare for technical exams <p>Hi </p>"},{"location":"Labs/lab10/#take-home-projects","title":"Take Home Projects","text":"GitHub <p>Hi </p> Presentation <p>Hi </p>"},{"location":"Labs/lab10/#_1","title":"\u260e\ufe0f Lab 10: Technical Interviews","text":""},{"location":"Projects/project1/","title":"\u2764\ufe0f Project 1: Advocacy","text":"<p>Important Dates</p> <p>Checkpoint 1: Monday, October 2nd</p> <p>Project Due: Monday, October 9th</p> <p>via GIPHY</p>"},{"location":"Projects/project1/#introduction","title":"\ud83d\udcd9 Introduction","text":"<p>The intent of this project is to build, run, and publish a 3D Unity game that tackles a social justice issue. You will be implementing your own version of a WebGL single-player video game with multiple levels. Please feel free to start with the 3D Unity project we have been working on in class as a starting point. I recommend making a copy of the class project to avoid confusing our class project from your project 1. If you would rather not use the 3D Unity project we have been working on in class, feel free to create a new 3D project from scratch. You may use any packages and assets as you see fit; however, please review the project requirements to ensure that you have integrated all required features. Last but not least - make sure the game is created with the Universal Render Pipeline (URP) and supports Perforce integration.</p> <p>By the end of Project 1, you will: </p> <ul> <li>Gain an understanding of the usage of Unity Engine - AI (NavMesh), Cinemachine, and Physics</li> <li>Program player movement and collisions with Transform.Translate and Rigidbody</li> <li>Understand the unique qualities and features that are important in designing and playing browser-based games</li> <li>Have experience designing, building, and publishing 3D Unity games for WebGL</li> <li>Collaborate and share projects via Perforce</li> <li>Share and receive feedback on itch.io and other online platforms</li> <li>Have a final product that you can add to your portfolio</li> <li>Build a browser-based game with GitHub pages and WebGL</li> <li>Experiment with Unity\u2019s new Input System</li> <li>Learn how to build interactive and immersive websites. See some examples on awwwards</li> </ul> <p>Policy on Collaboration and Cheating</p> <p>For this project, you must work alone! Please carefully read the Policy on Collaboration and Cheating to see what this means exactly. In particular, do not look for solutions online, use game templates, and generate code with AI such as ChatGPT. </p>"},{"location":"Projects/project1/#the-game","title":"\ud83d\udc7e The Game","text":"<p>Games have the power to reach, engage, and educate the public. No matter where we end up in life, sharing our knowledge, having and finding purpose, and inspiring others through our works are important in building a more equitable and sustainable world. Select a cause, set of values, or mission you care about and come up with an idea for a game that achieves meaningful social change. Pick something that matters to you and promote the cause and ideas through your game. Advocacy can take many forms such as storytelling, gameplay, and narrative mechanics that inspire players to take action. I challenge you to use your skills and creativity to create a short, fun, and complete game that challenges beliefs, investigates one\u2019s purpose, uplifts others, and spreads compassion. </p> <p>Some potential topics:</p> <ul> <li>Animal rights</li> <li>Accessibility</li> <li>Mental Health</li> <li>Environmental justice</li> <li>Sustainability</li> <li>Civil Rights</li> <li>Education</li> <li>Health</li> </ul>"},{"location":"Projects/project1/#getting-started","title":"\ud83c\udfac Getting Started","text":"Step 1: Create a new Unity project <p>Unity URP is the best overall pipeline for general purposes. URP has higher rendering quality compared to Unity 3D. Unity 3D is recommended for prototypes that don't require high quality graphics.</p> <p></p> Step 2: Scene set up <p>Right click in the Hierarchy and create a new plane at (0, 0, 0) and a 3D cube at (0, 1, 0).</p> <p></p> Step 3: Package Manager <p>In the Windows/Package Manager tab, add Cinemachine and AI Navigation packages. If you are workinng in Unity versions older than 2022, please add the AI Navigation package by name <code>com.unity.ai.navigation</code></p> <p></p> Step 4: Rigidbody and Box Collider <p>In your Inspector panel, add the Rigidbody and Box Collider components. </p> <p></p> Step 5: Camera and Cinemachine <p>Unity URP is the best overall pipeline for general purposes. URP has higher rendering quality compared to Unity 3D. Unity 3D is recommended for prototypes that don't require high quality graphics.</p> <p></p> Step 6: Opponent Movement and NavMesh <p>Unity URP is the best overall pipeline for general purposes. URP has higher rendering quality compared to Unity 3D. Unity 3D is recommended for prototypes that don't require high quality graphics.</p> <p></p> <p></p> C# OpponenttMovement.cs<pre><code>using System;\nusing UnityEngine;\nusing UnityEngine.InputSystem;\nusing UnityEngine.AI;\npublic class OpponentMovement : MonoBehaviour\n{\n[SerializeField] private NavMeshAgent opponent;\n[SerializeField] private Transform player;\n// Start is called before the first frame update\nvoid Start()\n{\nopponent = GetComponent&lt;NavMeshAgent&gt;();\n}\n// Update is called once per frame\nvoid Update()\n{\nopponent.SetDestination(player.position);\n}\n}\n</code></pre>"},{"location":"Projects/project1/#requirements","title":"\ud83c\udf9f\ufe0f Requirements","text":"<p>Your game should include the following requirements and features:</p> <ul> <li> Short video game created with Unity 3D URP</li> <li> Published as a WebGL build so that we can add it to a ReactJS website later on</li> <li> Game can be short but must be playable. Can be single player</li> <li> Game must look complete - use assets and sound effects </li> <li> If your game involves a scoring system, display score on screen</li> <li> Include end and win game screens</li> <li> The intro of the game is important. Design your intro with animations, instructions, and more</li> <li> You must use Cinemachine, NavMesh, and integrate some sort of player movement and collisions in your game</li> <li> Project must be shared with the instructors via Perforce</li> <li> You may choose to use Unity's old or new input systems</li> <li> And most importantly, publish to itch.io!!</li> </ul>"},{"location":"Projects/project1/#questions","title":"\ud83e\uddd0 Questions","text":"<p>Putting thought into who is playing your game and how they will experience it is important. Imagine who your players are and how they will feel playing your game. Your game should draw some sort of positive emotion from your players - wonder, excitment, inspiration, happiness, hope, etc. </p> <p>Here are some questions to keep in mind: </p> <ul> <li>Who is the video game made for?</li> <li>What are the takeaway lessons players will learn from your game?</li> <li>What is the moral message of your game?</li> <li>Why are you creating this game? This game should be something you like too!</li> </ul>"},{"location":"Projects/project1/#grading","title":"\ud83d\udcaf Grading","text":"<p>We will be play testing your game during class!! Please make sure your game is published on itch.io by play test day and is 100% playable. </p> Assignment Description Percentage Documentation Spend some time writing taglines and descriptions for your project. Take some videos and screenshots that you can use for your portfolio and resume. The instructors will be giving you feedback on this project through your portfolio. 10% Peer Feedback During Week 7, please meet with 2 of your classmates to give and receive feedback. It is important to give verbal and written feedback. Please fill out the google form for each student you gave feedback to. 10% Checkpoint 1 Check in with any instructor. Show they what you've been working on and ask them any questions you have. 10% Published Website By Monday, October 9th (Playtest day) you must have your game published on itch.io. 30% Playtest during class It is important to be present in class on this day. Participation is important here in giving and receiving feedback. This is the day your game should be working! The instructors will begin grading your project on Wednesday, October 11th. 40% Total 100%"},{"location":"Projects/project1/#support","title":"\ud83e\udd84 Support","text":"<p>Ask for help! Don't be afraid to reach out to us and ask for help. Work together with your classmates and schedule office hours with the instructors whenever you need help and support.</p>"},{"location":"Projects/project1checkpoint/","title":"\u2705 Checkpoint","text":"<p>By now, you have worked on project 1 for a week! It is time now to get feedback on your game before play test day. Each student should meet with two classmates to give and receive feedback. Every student will also meet with one of the instructors. Please feel free to ask the instructors for help and advice. We are here to support you!! by the end of the week, you should have met with your instructors and students and have enough feedback to bring your game to the next level! </p>"},{"location":"Projects/project1checkpoint/#peer-check-in","title":"\ud83d\ude4b\u200d\u2640\ufe0f Peer Check-In","text":"<p>Peer Feedback Form</p> <p>Fill out the Google form after you have given each each classmate verbal feedback. The feedback will be shared with your classmate.</p> <p></p>"},{"location":"Projects/project1due/","title":"\ud83c\udfc6 Project 1: Submission","text":"<p>Important Dates</p> <p>Form Due: Sunday, October 15th</p> <p>To submit the project, add and submit your files with Perforce. Then, proceed to include your documentation and itch.io links in the following google form.</p> <p>The instructors will be grading this assignment with the following criteria:</p> <ul> <li> Perforce code: The instructors will be reviewing your project code and commenting on best programming practices and Unity implementation practices</li> <li> Itch.io: Published as a WebGL build on itch.io and playable with classmates. You must provide written feedback on your classmate's work.</li> <li> Documentation: Introduce your project and write about the game's purpose. Present your project with photos and videos as part of your documentation process.</li> </ul> Documentation <p>The purpose of documenting your work is to help you prepare a project for your portfolio. Feel free to submit a link to your personal website or to a Google doc/folder. You may write and document your project directly in your personal website as well. </p> <p>What to include:</p> <ul> <li>Name of the game</li> <li>Finished game demo video</li> <li>Your elevator pitch. Executive summary and tagline of your project. Write about the game concept, genre, target audience, why you created the game, the purpose behind your game</li> <li>Game play desription. Does your game have any objectives, game progressions, etc.</li> <li>Game elements. Talk about the main features and mechanics such as level design, characters, the world</li> <li>Current work progress snapshots</li> <li>Full documentation of the step-by-step procedure of creating the game</li> </ul> Submission Links <p>Please fill out the Google Form form with your website and itch.io links.</p> <p>Loading\u2026</p>"},{"location":"Projects/project2/","title":"\ud83e\uddc3 Project 2: Outside the Box","text":"<p>Important Dates</p> Checkpoint Play Test Submission CP 1: Wednesday, November 1st   In pairs, pull Perforce projects and pair program in Visual Studio Code. PT 1: Monday, November 11th   You should have a working game by this day. We will be playtesting on your hardware. Fill out the provided Google Form to give and receive feedback. Final Presentation: Wednesday, December 6th   In class presentation about your project. Students will have the opportunity to play your game while you present your work. Your presentation should consist of a research poster. CP 2: Monday, November 11th   Read your classmate's papers and give them constructive feedback in their Google Docs. PT 2: Monday, December 4th   You should have a working game by this day. We will be playtesting on your hardware. Fill out the provided Google Form to give and receive feedback. Project Due: Monday, December 11th   Your final submission should include a link to your published game, Overleaf link to your research paper, and 2 PDF files for your paper and poster. CP 3: Monday, November 27th   In pairs, host a code review with Perforce. <p>via GIPHY</p>"},{"location":"Projects/project2/#introduction","title":"\ud83d\udcd9 Introduction","text":"<p>Fluency in the \u201cwhat\u2019s\u201d and \u201chow\u2019s\u201d through game design is important. But also the \u201cwhy\u2019s\u201d that situate games as a cultural activity is essential as a contributor in the future of gaming but also to your career. The importance of innovation, research </p> <p>Take this final project as an opportunity to grow your soft skills of why you love and chose to learn game development. Find something you want to dive into that will challenge the state of the art and enable you to advance through your career. Here is the opportunity to create an experience that excites you with any game engine of your choice in addition to the mentorship of your instructors. Carefully consider what your needs are and what you are trying to accomplish when deciding to develop with Unreal, Godot, or Unity. </p> <p>By the end of this project you will:</p> <ul> <li>Participate in code reviews with Perforce</li> <li>Create UI to bring your project together with UI Toolkit</li> <li>Master UXML, USS, C# and/or HTML, CSS, and Javascript</li> <li>Collaborate and share builds with GitHub repositories</li> <li>Pair programming in Visual Studio Code</li> <li>Create an software experience that you are proud of - game, AR/VR experience, app, website, etc.</li> <li>Gain experience in what goes into publishing your projects and experiences</li> <li>Understand why you picked your selected platform and the ins and outs of it</li> <li>Work with your platform's respective SDKs </li> <li>Have expertise and background knowledge in the hardware you are publishing to</li> <li>Have a published a game! </li> </ul> <p>Policy on Collaboration and Cheating</p> <p>For this project, you must work individually or in teams! Please carefully read the Policy on Collaboration and Cheating to see what this means exactly. In particular, do not look for solutions online, use game templates, and generate code with AI such as ChatGPT. </p> <p>Legal Licensing and Copyrights</p> <p>For this project, you will be publishing a game, app, or other kind of software experience! Please make sure to read the copyrights when using templates, packages, and assets. Read Unity's Terms of Service for reference.</p>"},{"location":"Projects/project2/#questions","title":"\ud83e\uddd0 Questions","text":"<ul> <li> <p>What is a digital and software experience that you find interesting? Is there anything you've always wanted to try making? Think of an idea that gets you excited and let's try to create it with Unity, Unreal, or Godot! </p> </li> <li> <p>Art has a responsibility to contribute cultural and humanist dimensions to our definition of the future. How does the intersection of art and technology move us from ephemeral performance to sustainable innovation? Ideate on ideas for a project and then write about it in your research paper.</p> </li> <li> <p>How does your experience critically explore its social, cultural, and affective impact?</p> </li> <li> <p>What is your experience's potential use case in the releam of emerging digital technologies? How does it impact users and citizens? Does your experience confront any major challenges of our time?</p> </li> </ul>"},{"location":"Projects/project2/#the-game","title":"\ud83d\udc7e The Game","text":"<p>Pick the platform you want to build for and publish to intentionally. Tailor your experience to the platform you selected. In project 2, I would like you to try publishing your experience or game and experiment with how you can take it to market. Consider the most natural inputs for your experience. Please note that many of these platforms do require a fee; however, you are welcome to use the instructor's account at no additional cost. </p> <p>\ud83d\udd25 I ENCOURAGE YOU TO TRY SOMETHING NEW \ud83d\udd25</p> <p>Some examples:</p> PC: Windows, Mac, Linux Requirements Resources Create your own Steamworks Account. The instructor/class has their own account as well. How to publish your game on Steam $100 USD per game. This is a mandatory fee for each game unless you make $1,000 on your game  Joining Steamworks Distribution Program Make sure your game meets Steam's Terms of Service. Steamworks Documentation: Getting Started Supports latest version of Windows. Make sure you have a Windows PC to test your game. Integrating Unity Games with Steamworks Install Steamworks SDK for your selected game engine. How to Launch a Game on Steam - Before Release <p></p> Android Mobile Requirements Resources Create your own Google Play Developer account. The instructor/class has their own account as well. Android Developers: Publish your app Cost is covered by the class. However, if you want to publish on your own it is a $25 one time fee. Apps are free to publish after the entrance fee. Publish your UNITY game on Google Play Store Accept Google Play's Terms of Service. How to Publish to Android Download Android Studio on your computer. Android Developers: Build your game in Unity Within Unity, build your game to Android and enable the Build App Bundle for Android. Developer's Guide to Releasing a Unity Game on Google Play <p> Publishing to the Google Play Store is a relatively straightforward process.   An example of Android widget games.</p> iOS Mobile Requirements Resources You must have a Mac and have XCode installed. Unity Learn: Publishing for iOS Cost is covered by the class. However, if you want to publish on your own it is a $100 a year to be part of the Apple Developer Program. Apps are free to publish after the yearly developer program fee. Apple Developer: Submit your iOS apps to the Apple Store Apple is very particular about how your app looks. You must follow Apple's Guidelines such as their Human Interface Guidelines. Unity Documentation: Build for iOS Within Unity, build your game to iOS and enable the Build App Bundle for iOS. There will be other packages to add depending on what kind of Apple platform you are designing for. How to Build &amp; Run Unity to iOS for Testing You are welcome to build for any Apple platform and experience. This includes widgets, iMessage games, App clips, Vision Pro, and standalone apps. Apple Game Center <p></p> <p>A preview of XCode and it's simulator.   </p> <p></p> <p>An example of an iMessage game, GamePigeon, for text messages. </p> Microcontrollers Requirements Resources You will be working with electronics and if you like, designing an encasing for your screen to turn it into a game console, mini arcade machine, or anything you want! Designing my own Game Console Cost is covered by the class and the instructor will provide a Raspberry Pi or Arduino. However, if you want to purchase your own microcontrollers they are usually between $20-35 USD. Run Unity game on Raspberry Pi 4 with Picade arcade machine Install the Arduinio IDE. This will help you build your project to your selected microcontroller. How to integrate Arduino with Unity - hardware work with software Within Unity, build your game to WebGL. Unity supports microcontrollers like Raspberry Pi. Documentation here. How to Integrate Arduino with Unity 3D <p></p> Websites Requirements Resources GitHub account with GitHub Pages set up. With GitHub Education, you can create a private repo for your website. If you do not have GitHub Education, you will need to make your build public. React Unity WebGL     Cost is FREE unless you want a custom domain which can cost between $5 - $10 a month to buy a domain. Custom Domains: Google Domains Install a web framework such as ReactJS Custom Domains: GoDaddy domains Within Unity, build your game to WebGL Awwwwards: Best Unity Websites in 2021 <p></p> Social Media Integrations <p>You are welcome to make a game for a specific social media platform such as Snapchat, Facebook Messenger, YouTube, Twitch, and Discord. Please see some of the resources listed below.</p> Resources Twitch Chat Integration: Create a game for Twitch's chat or integrate your game with Twitch. Facebook Web Games and Instant Games: Make games with WeBGL for Facebook websites and Facebook messenger. YouTube Advertisement Games with AppMana: Integrate your game into advertisements so that users can actively engage in media. With Snapchat's Lens Studio and Snap Kit Unity SDKs try creating an interactive, AR game. Making Games in Discord: Create games with Discord's Bot API. <p></p>"},{"location":"Projects/project2/#the-paper","title":"\ud83d\udcdd The Paper","text":"<p>Your research paper can span areas including but not limited to animation, simulation, imaging, geometry, modeling, rendering, human-computer interaction, haptics, fabrication, robotics, visualization, audio, optics, programming languages, immersive experiences, and anything that aims to advance the state of the art that is related to your game or software experience.</p> <p>More information coming soon!!</p>"},{"location":"Projects/project2/#requirements","title":"\ud83c\udf9f\ufe0f Requirements","text":"<p>In short, the main requirement is to create a game and write a paper. </p> <ul> <li> Build and publish to a specific hardware and platform</li> <li> Must include game user interface with UI Toolkit or ReactJS</li> <li> Utilize Unity\u2019s new Input Management System</li> <li> The experience must look and feel completed</li> <li> Play and test game on your selected hardware</li> <li> Research paper with OverLeaf</li> <li> Research poster with Adobe InDesign</li> <li> Must code with C# and not node-based </li> </ul>"},{"location":"Projects/project2/#grading","title":"\ud83d\udcaf Grading","text":"<p>We will be play testing your game during class!! Please make sure your game is published on itch.io by play test day and is 100% playable. </p> Assignment Description Percentage Peer Feedback Please meet with your classmates to give and receive feedback. It is important to give verbal and written feedback. Collaborate on your projects and support each other. Please fill out the google form for each student you gave feedback to. 10% Checkpoints and Playtests Check in with any instructor. Show they what you've been working on and ask them any questions you have. Complete the check in assignments with your classmates to practice collaborating over code. Participation is mandatory on playtest days and your game should be working and running on your selected hardware. 10% Research Paper Write your research paper in Google Docs and share it with the instructors. For your submission, your research paper should be properly formated with Overleaf and exported as a PDF. It should also come in the format as a poster, designed with Adobe InDesign. 20% Game Design We will be evaluating your game's overall experience. Your game should look and feel complete with assets, sounds, and user interface. Your game should be completed by Monday, December 4th and you are free to use the rest of the time to prepare your project to be published. 30% Published Game It is mandatory to publish your game. The process of publishing your game can be as long as 1 - 3 weeks. Please plan ahead and have your published game submitted by Monday, December 11th. 30% Total 100%"},{"location":"Projects/project2/#support","title":"\ud83e\udd84 Support","text":"<p>Ask for help! Don't be afraid to reach out to us and ask for help. Work together with your classmates and schedule office hours with the instructors whenever you need help and support.</p> <p>Do I need to learn all the different languages for each platform? What if I don't know Swift/Kotlin/Javascript/C++/Java ?</p> <p>Don't worry! You don't need to know all the languages and don't need to know everything about each language. You will work a little bit in those languages to make minor tweaks. Plus, the instructors are here to help you!</p> <p>A research paper usually takes a lot of work. Are we really going to write out a full research paper ?</p> <p>It will be a research paper but it will be scaled down and shortened! We will be learning how to style write a professional paper that can be submitted for conferences in the future. </p> <p>What if they don't approve the game I submitted ?</p> <p>That is okay! Ideally, you will have a published app on the platform of your choice. But if it doesn't work out, we will at least publish to GitHub Pages and itch.io.</p> <p>Why do we need to learn how to pair program and participate in code reviews ?</p> <p>Game development is a collaborative effort so it is important to learn how to collaborate on designs and code. There are many great tools that will support collaboration within Visual Studio Code, Perforce, GitHub, and Unity.</p> <p>What if I don't want to publish my game ?</p> <p>It is required to publish your game for project 2. Going through the process of sharing and putting up your game is an important part of the development experience. You will learn A LOT. At minimum, you should be publish your game to GitHub Pages and itch.io.</p>"},{"location":"Projects/project2checkpoint1/","title":"\ud83d\udc7e Pair Programming","text":"<p>via GIPHY</p> <p>What is pair programming? Pair programming is an approach in which two developers program together with continuous collaboration on the same technical task. Working together can improve communication amongst others who are working on the project and provide opportunities for live and continuous code reviews. A huge plus to pair programming is that it can make completing a task much more fun while learning from one another. </p> <p>For this checkpoint, please open one Perforce depot project with at least one classmate. Our goal is to try pair programming techniques within Visual Studio Code and Perforce. </p>"},{"location":"Projects/project2checkpoint1/#resources-and-links","title":"\u2600\ufe0f Resources and Links","text":"<ul> <li>Perforce: Microsoft and Perforce Integrations</li> <li>Pamela Fox's Blog: Best practices for prompting GitHub Copilot in VSCode</li> <li>Code Mentor: Pair Programming: What, Why, and How</li> <li>DEV Community: Pair Programming: Best Practices and Tools</li> <li>VSCode: Collaborate with Live Share</li> <li>Microsoft Learn: What is Visual Studio Live Share ?</li> <li>Microsoft Learn: Common Use Cases and Pair Programming</li> <li>Perforce: Developer &amp; Code Collaboration Tools</li> </ul>"},{"location":"Projects/project2checkpoint1/#perforce","title":"\ud83e\udd16 Perforce","text":"<p>With more and more teams working remotely, and more companies hiring employees in different geographic regions, code collaboration tools are important for improving the efficiency of remote teamwork. They enable clearer communication between team members, and many offer features that support teamwork in real-time. </p> <p>Code collaboration tools improve code quality (and therefore quality of the final product) in a number of ways, depending on the type of tool in question. Version control maintains a full history of every iteration of your code, allowing you to easily roll back to a previous version or identify exactly where an issue originated. Code review tools help catch bugs (and catch them early), improve code readability, and help maintain best practices. (Perforce)</p> <p>Perforce Streams</p> <p>Perforce Streams are how branching and merging are performed within Helix Core. Streams bring built-in intelligence to managing how changes flow from one branch or codeline to another. This makes it more convenient for developers by helping team members visualize the bigger picture. Perforce Steams also helps bypass tedious configuration details so that teams can start working right away. </p> <p>Streams are similar to channels that help you and your team make sure each change gets to the right place in the correct manner. A unique feature of P4V is the Stream Graph. The Stream Graph shows your project's codelines and branches, quickly creating and easily flows of changes between workflows. It also helps with orienting the project with its hierarchy and detailed connections between streams. </p> <p></p> <p>Windows VSCode Plugin</p> <p>Sign in and connect to the Perforce server. Navigate to our class folder.</p> <p></p>"},{"location":"Projects/project2checkpoint1/#visual-studio-code","title":"\ud83d\udd35 Visual Studio Code","text":"<p>Windows VSCode Plugin</p> <p>Fill out the Google form after you have given each each classmate verbal feedback. The feedback will be shared with your classmate.</p> <p></p>"},{"location":"Projects/project2checkpoint1/#submission","title":"\ud83c\udf89 Submission","text":"<p>Windows VSCode Plugin</p> <p>Fill out the Google form after you have given each each classmate verbal feedback. The feedback will be shared with your classmate.</p> <p></p>"},{"location":"Projects/project2checkpoint2/","title":"\ud83d\udcdd Paper Checkpoint","text":"<p>By now, you have worked on project 2 for four weeks! It is time now to get feedback on your game before play test day. Each student should meet with two classmates to give and receive feedback. Every student will also meet with one of the instructors. Please feel free to ask the instructors for help and advice. We are here to support you!! by the end of the week, you should have met with your instructors and students and have enough feedback to bring your game to the next level! </p>"},{"location":"Projects/project2checkpoint2/#peer-check-in","title":"\ud83d\ude4b\u200d\u2640\ufe0f Peer Check-In","text":"<p>Peer Feedback Form</p> <p>Fill out the Google form after you have given each each classmate verbal feedback. The feedback will be shared with your classmate.</p> <p></p>"},{"location":"Projects/project2checkpoint3/","title":"\ud83d\udc7e Code Review","text":"<p>By now, you have worked on project 1 for a week! It is time now to get feedback on your game before play test day. Each student should meet with two classmates to give and receive feedback. Every student will also meet with one of the instructors. Please feel free to ask the instructors for help and advice. We are here to support you!! by the end of the week, you should have met with your instructors and students and have enough feedback to bring your game to the next level! </p>"},{"location":"Projects/project2checkpoint3/#peer-check-in","title":"\ud83d\ude4b\u200d\u2640\ufe0f Peer Check-In","text":"<p>Peer Feedback Form</p> <p>Fill out the Google form after you have given each each classmate verbal feedback. The feedback will be shared with your classmate.</p> <p></p>"},{"location":"sp24/","title":"Calendars","text":""},{"location":"sp24/#course-calendar","title":"\ud83d\udcd3 Course Calendar","text":"Week Date Lecture Lab and Discussions Project 1 Mon 8/21 Wed 8/23 No Class Introduction to Game Engines Lab 0: Set up 2 Mon 8/28 Wed 8/30 Godot: 2D Games Unreal Engine: MetaHuman Lab 1: Unreal Engine 3 Mon 9/4 Wed 9/6 No Class (Labor Day) Unity and Perforce 4 Mon 9/11 Wed 9/13 C#: Data Structures, Namespaces AR/VR with Stanford XR and BroadAR Lab 2: Immersive Realities 5 Mon 9/18 Wed 9/20 Spatial Design with Niantic Labs C#: Arrays, Coroutines, Recursion Lab 3: Classes and Coroutines 6 Mon 9/25 Wed 9/27 Unity 3D: Player Movement and Collisions Unity 3D: Object Oriented Programming Lab 4: Generics and Inheritence Project 1: Advocacy 7 Mon 10/2 Wed 10/4 Embodied Cognition with UC Berkeley USC Resume and LinkedIn Workshop Lab 5: Quaternions Project 1 Checkpoint 8 Mon 10/9 Wed 10/11 Project 1 Playtest WebGL and ReactJS Lab 6: Publishing Builds Project 1 Due 9 Mon 10/16 Wed 10/18 Unity UI: uGUI and UI Toolkit Unity UI: UI Toolkit in World Space Lab 7: Raycasting Project 2: Outside the Box 10 Mon 10/23 Wed 10/25 Unity 3D: Mecanim Animation Unity 3D: Advanced Cinemachine Lab 8: Illumination 11 Mon 10/30 Wed 11/1 Yarn Spinner for Unity Variable Management C# and Yarn Lab 9: VFX Graph Pair Programming 12 Mon 11/6 Wed 11/8 Unity Math: Vector Geometry Unity Math: Pathfinding Algorithms Lab 10: Technical Interviews 13 Mon 11/13 Wed 11/15 Project 2 Playtest Individual Tutoring (Android/iOS Mobile Games) Paper Checkpoint 14 Mon 11/20 Tue 11/21 Wed 11/22 Individual Tutoring (Lua for Game Consoles) Individual Tutoring (Publishing for Steam) No Class (Thanksgiving) 15 Mon 11/27  Wed 11/29 Individual Tutoring (Developing Oculus VR Apps)  Individual Tutoring (Vuforia Engine for Unity AR) Code Review 16 Mon 12/4  Wed 12/6 Project 2 Playtest Project 2 Final Presentations 17 Mon 12/11  Wed 12/13 Individual Tutoring (Multiplayer with Photon)  Individual Tutoring (WebRTC and MQTT) Project 2 Due"},{"location":"sp24/#usc-academic-calendar","title":"\u270c\ufe0f USC Academic Calendar","text":"<ul> <li>Classes Begin: August 21st</li> <li>Labor Day: September 4th</li> <li>Fall Recess: October 12 - 13th</li> <li>Veterans Day: November 10th</li> <li>Thanksgiving Holiday: November 22 - 26th</li> <li>Classes End: December 1st</li> <li>Study Days: December 2 - 5th</li> <li>Exams: December 6 - 13th</li> </ul>"},{"location":"sp24/#office-hours-calendar","title":"\ud83d\uddd3\ufe0f Office Hours Calendar","text":"<ul> <li>Debbie Yuen: <ul> <li>MW 2:00 pm - 3:00 pm PST (On Campus)</li> <li>TuTh 7:00 pm - 10:00 pm PST (Google Meet)</li> </ul> </li> <li>Haocheng Liu:<ul> <li>M 10:00 am - 12:00 pm PST (On Campus &amp; Discord Voice Channel)</li> </ul> </li> </ul>"},{"location":"sp24/#contest-calendar","title":"\ud83c\udfc6 Contest Calendar","text":"Contest Category Deadline SF Design Week Design TBA Core77 Design TBA Fast Company Design TBA"}]}